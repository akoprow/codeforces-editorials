<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codeforces editorials</title>
    <description>Codeforces editorials</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <author>
      <name>Adam Koprowski</name>
      <email>Adam.Koprowski@gmail.com</email>
      <uri></uri>
    </author>
    
      <item>
        <title>Round 719 (Div III)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1520&quot;&gt;Codeforces Round #719 (Div. 3)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520a/&quot;&gt;
    Do Not Be Distracted!
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520a-do-not-be-distracted.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;We can do it in one pass: consider all blocks of problems (i.e. ignore a problem if it’s the same as the previous one, meaning it belongs to the same block).  Now if any problem has at least \(2\) groups then the teacher can be suspicious.&lt;/p&gt;

&lt;p&gt;Alternatively, for every problem find its first and last occurrence.  All the positions in between must also belong to that problem or else the teacher can be suspicious.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520b/&quot;&gt;
    Ordinary Numbers
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520b-ordinary-numbers.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;number theory&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Simply iterate through all the digits from \(1\) to \(9\) and for each digit keep constructing ordinary numbers with increasing number of digits (i.e. \(d, dd, ddd, \ldots\)) until they exceed \(n\).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520c/&quot;&gt;
    Not Adjacent Matrix
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520c-not-adjacent-matrix.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;As it turns out \(n = 2\) is the only case where there is no answer.  For all the other numbers we can do a simple construction of dividing the board into black and white cells, like a chessboard.  First fill black cells row by row from \(1\) going up and then continue, similarly, with higher numbers for white cells, so that for instance for \(n = 3\) we get:&lt;/p&gt;

\[\begin{pmatrix}1 &amp;amp; 6 &amp;amp; 2 \\ 7 &amp;amp; 3 &amp;amp; 8 \\ 4 &amp;amp; 9 &amp;amp; 5 \end{pmatrix}\]

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520d/&quot;&gt;
    Same Differences
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520d-same-differences.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;hashing&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;So \(a_j − a_i = j − i\) can be represented equivalently as:  \(a_j - j = a_i - a_i\).  So we can transform each number \(a_i\) into \(a_i - i\) and now the problem can be reduced to finding the number of equal values in such transformed array.  We do that simply by doing frequency counts and each value occurring \(x\) times gives us \(\frac{x \cdot (x-1)}{2}\) such pairs.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520e/&quot;&gt;
    Arranging The Sheep
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520e-arranging-the-sheep.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;I solved it by considering all sheeps one by one and assuming that a given sheep is stationary.  Then with a DP it’s possible for every prefix to compute the cost of moving all the sheep up until that position to form a line ending at that position (i.e. going from \(*.*.* \to ..***\)) and similarly for every suffix.&lt;/p&gt;

&lt;p&gt;But actually there’s a much simpler solution hinging on the fact that if there are \(k\) sheeps then in the optimal solution sheep \(\lceil \frac{k}{2} \rceil\) should remain stationary and then it’s just a simple single sweep calculation.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;F1

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520f1/&quot;&gt;
    Guess the K-th Zero (Easy version)
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/F1&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520f1-guess-the-kth-zero-easy.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;interactive&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;This is just a simple binary search.  We will maintain a segment in which the \(k\)‘th zero must be, starting with the full \([0, n-1]\) segment.&lt;/p&gt;

&lt;p&gt;Let’s say we are looking for the \(k\)‘th zero and we know it is within \([l, r]\).  Pick \(m = \lfloor \frac{l+r}{2} \rfloor\), ask for segment \([l, m]\).  Let’s say the answer is \(s\).  Than means that there are \(z = m-l+1-s\) zeros in that segment and so:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if \(z \ge k\) then we continue searching for \(k\) zeros in \([l, m]\)&lt;/li&gt;
  &lt;li&gt;if \(z &amp;lt; k\) then we continue searching for \(k-z\) zeros in \([m+1, r]\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We end up asking at most \(\log n\) queries, which is fine.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;F2

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520f2/&quot;&gt;
    Guess the K-th Zero (Hard version)
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/F2&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520f2-guess-the-kth-zero-hard.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;interactive&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;This is similar to the easy problem except we need to be smarter and remember responses and re-use answers rather than asking again.&lt;/p&gt;

&lt;p&gt;When doing so we need to be careful to account for the changes in the array by remembering that the zeroes we guessed so far were changed into ones.  The easiest way to do it is to store answers pertaining to the original array and then when re-using an answer for segment \([l, r]\), add to it the number of guessed zeros we’ve made so far in that range (by using an OST).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1520&lt;/tiny&gt;G

  
  &lt;a href=&quot;/codeforces-editorials/problems/1520g/&quot;&gt;
    To Go Or Not To Go?
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1520/problem/G&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r719/1520g-to-go-or-not-to-go.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;shortest paths&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, observe that there is no point to using portal more than once.  If we have a solution that uses portal multiple times then we can always jump from the first portal immediately to the last, removing the part in the middle and reducing the cost.  So the answer can have one of the two forms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;go from start to end without any use of portals.&lt;/li&gt;
  &lt;li&gt;go from start to portal \(A\), teleport to \(B\) and go from there to the end.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can compute costs of those options by doing a flood algorithm from start and keeping track of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the cheapest direct route to the end (if any) and&lt;/li&gt;
  &lt;li&gt;the cheapest way to some portal + cost of taking that portal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we do flood from the end to compute:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the cheapest way from end to some portal + cost of taking it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combining the two we get the answers for the original two options and we’re done.&lt;/p&gt;

&lt;p&gt;Careful that both start and end can be portals (I failed during the contest because of that).&lt;/p&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-719.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Wed, 05 May 2021 00:00:00 +0100</pubDate>
        <link>//R-719</link>
        <link href="/R-719"/>
        <guid isPermaLink="true">/R-719</guid>
      </item>
    
      <item>
        <title>Global Round 14</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1515&quot;&gt;Codeforces Global Round 14&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515a/&quot;&gt;
    Phoenix and Gold
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/gr/gr14/1515a-phoenix-and-gold.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;If the overall sum is \(x\) then whatever we do in the last step we’ll get \(x\) and so there’s no answer.&lt;/p&gt;

&lt;p&gt;Otherwise, we can just keep on adding weights in arbitrary order and if the next one would cause the running sum to be exactly \(x\) then we can just swap it with the following element.  Since all elements are distinct this is bound to lead to a solution.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515b/&quot;&gt;
    Phoenix and Puzzle
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/gr/gr14/1515b-phoenix-and-puzzle.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;geometry&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;There are two possible squares to be used as building squares for the construction: one combining \(2\) triangles and the other one \(4\) triangles.  Both were shown in the initial test cases.&lt;/p&gt;

&lt;p&gt;Now we can combine those basic building blocks by putting an arbitrary number of them on a grid hence getting \(x \times x\) grid for any \(x\).&lt;/p&gt;

&lt;p&gt;Combined, this means that we can make a construction if \(n = 2x^2\) or \(n = 4x^2\) for some integer \(x\).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515c/&quot;&gt;
    Phoenix and Towers
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/gr/gr14/1515c-phoenix-and-towers.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;We can sort towers in decreasing order and make a construction where at each step we add the current block to the smallest tower.  Since all elements are bound by \(x\) we can easily see that with this construction the difference between highest and smallest tower will also be bound by \(x\).  To implement it we can store current towers in a priority queue.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515d/&quot;&gt;
    Phoenix and Socks
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/gr/gr14/1515d-phoenix-and-socks.kt&quot;&gt;(Code)&lt;/a&gt;

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;two pointers&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, let’s remove pairs that we can match without any changes.  We can do that with two pointers traversing lists of left/right socks sorted by color.&lt;/p&gt;

&lt;p&gt;Now, suppose we have more left than right socks (otherwise, swap them).  Whatever we do we’ll need to turn \(\frac{l-r}{2}\) left socks into right socks.  To do so is best to do it in pairs of left socks with matching colors so that after turning one of them into a right sock we have a matching pair.&lt;/p&gt;

&lt;p&gt;Once we have no more matching socks, we just turn the required number of left socks into right and then change their colors to match with right socks.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515e/&quot;&gt;
    Phoenix and Computers
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;combinatorics&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515f/&quot;&gt;
    Phoenix and Earthquake
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dsu&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;trees&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;G

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515g/&quot;&gt;
    Phoenix and Odometers
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/G&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;number theory&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;H

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515h/&quot;&gt;
    Phoenix and Bits
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/H&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;bitmasks&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1515&lt;/tiny&gt;I

  
  &lt;a href=&quot;/codeforces-editorials/problems/1515i/&quot;&gt;
    Phoenix and Diamonds
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1515/problem/I&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/GR-14.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Sun, 02 May 2021 00:00:00 +0100</pubDate>
        <link>//GR-14</link>
        <link href="/GR-14"/>
        <guid isPermaLink="true">/GR-14</guid>
      </item>
    
      <item>
        <title>Educational Round 107</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1511&quot;&gt;Educational Codeforces Round 107 (Rated for Div. 2)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511a/&quot;&gt;
    Review Site
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu107/1511a-review-site.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;The basic idea is to send all the nay-sayers to the second server and all the positive ones to the first ones, hence ensuring that everyone who’s undecided says yes.  Helpfully draws are in our favour so the answer is simply the total number of reviewers of types \(1\) and \(3\).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511b/&quot;&gt;
    GCD Length
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu107/1511b-GCD-length.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Since \(10 = 2 \cdot 5\) we have that \(10^i = 2^i \cdot 5^i\).  So let’s take \(x = 100\ldots 0 \cdot 10^{c-1}\) and \(y = 111\ldots 1 \cdot 10^{c-1}\). We have \(gcd(x, y) = 10^{c-1}\) since \(10^i\) and \(11\ldots1\) are relatively prime.  So we can prepend the prefix of required length to both \(x\) and \(y\) and we’re done.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511c/&quot;&gt;
    Yet Another Card Deck
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu107/1511c-yet-another-card-deck.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;trees&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, clearly we only need to keep track of the top card of each color.  Secondly, when we move card from position \(p\) to the top then the index of all the cards which previously had an index less than \(p\) increases by \(1\).  So this easily leads to a simulation of the process with \(O(nk)\) complexity.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511d/&quot;&gt;
    Min Cost String
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu107/1511d-min-cost-string.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;It was fairly easy to solve it (greedily) but much harder to prove that that (greedy) solution works.  The main observation is that we have \(k^2\) pairs of letters and we want to use them “uniformly”, i.e. if the generated string is short enough then just use as many of those pairs as we can, as that will give us a \(0\) cost.  Otherwise, try to repeat each pair as few times as possible.  We essentially do it by keeping track of unused pairs and being careful not to get into a letter from which we cannot move forward (i.e. do not follow \(x\) with \(y\) if there are no moves from \(y\)).  Once we use all the pairs recreate them again and start from scratch.&lt;/p&gt;

&lt;p&gt;There’s a nice interpretation of this problem where we are basically looking for an Eulerian cycle in a graph (a clique actually) of letters.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511e/&quot;&gt;
    Colorings and Dominoes
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;combinatorics&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511f/&quot;&gt;
    Chainword
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2700 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2700&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;matrices&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;strings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1511&lt;/tiny&gt;G

  
  &lt;a href=&quot;/codeforces-editorials/problems/1511g/&quot;&gt;
    Chips on a Board
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1511/problem/G&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2700 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2700&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;bitmasks&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;games&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/Edu-107.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Mon, 12 Apr 2021 00:00:00 +0100</pubDate>
        <link>//Edu-107</link>
        <link href="/Edu-107"/>
        <guid isPermaLink="true">/Edu-107</guid>
      </item>
    
      <item>
        <title>Round 712 (Div I+II)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1503&quot;&gt;Codeforces Round #712 (Div. 1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1504&quot;&gt;Codeforces Round #712 (Div. 2)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1504&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1504a/&quot;&gt;
     Déjà Vu
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1504/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r712/1504a-deja-vu.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;strings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;We cannot just try inserting “a” at every position and checking if we get a palindrome as that will TLE.  However, note that we can just try inserting at the beginning and at the end.  If neither works then there’s no solution.  Why?   Since \(a\vec{x}\) is a palindrome and \(\vec{x}a\) is a palindrome then clearly \(\vec{v}\) starts and ends with an \(a\) and in fact is just a sequence of \(a\) so clearly inserting \(a\) anything into it will not give us a palindrome.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1504&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1504b/&quot;&gt;
    Flip the Bits
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1504/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r712/1504b-flip-the-bits.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;We should start fixing from the end, as if some suffix is good we don’t need to touch it ever again.  So we go from the end of the string and keep track of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a flag indicating whether we flipped the prefix and&lt;/li&gt;
  &lt;li&gt;number of \(0\)s and \(1\)s in the prefix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If at current position we get something else than what we need (after taking into account that prefix might have been flipped) then we need to flip that prefix.  So if number of \(0\)s and \(1\)s is different then there’s no solution.  Otherwise we flip the “prefix-flipped” flag and continue.  Regardless of whether the current position matches or not we also update number of \(0/1\) in the prefix.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1504&lt;/tiny&gt;C / &lt;tiny&gt;1503&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1504c/&quot;&gt;
    Balance the Bits
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1504/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r712/1504c-balance-the-bits.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Think of the usual way to check for correctness of such an expression where we count \(+1/-1\) for “(“ / “)” and need to never go below zero and end up with zero.  Note that for both \(a\) and \(b\) we will have some values contributed by the common substring, say \(x\), and some contributed by the parts where they must differ, call it \(y_a\) and \(y_b\).  Then we have that:&lt;/p&gt;

&lt;p&gt;\(x + y_a = 0\) and \(x + y_b = 0\)&lt;/p&gt;

&lt;p&gt;Hence \(y_a = y_b\) but we also know that \(y_a = -y_b\) as those two parts are complementary (i.e. if one has an opening bracket the other one has a closing one and vice versa).  Hence we conclude that \(x = y_a = y_b = 0\).  That means that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;number of positions on which \(a\) and \(b\) agree must be even and will be split evenly between opening and closing brackets.&lt;/li&gt;
  &lt;li&gt;number of positions on which they differ must be even and we will alternate between opening and closing bracket for it.&lt;/li&gt;
  &lt;li&gt;to minimize the chance that we go below zero at some point (i.e. produce unmatched closing bracket) let’s start with the half of opening brackets and finish with all closing brackets for the common part.&lt;/li&gt;
  &lt;li&gt;all that’s left at this point is to construct \(a\) and \(b\) in the unique way prescribed above and check whether they both are valid expressions.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1504&lt;/tiny&gt;D / &lt;tiny&gt;1503&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1504d/&quot;&gt;
    3-Coloring
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1504/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r712/1504d-3-coloring.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1700 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1700&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;games&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;interactive&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Let’s think of the grid as a chessboard with alternating black and white squares.  Firstly let’s fill one black and one white square with any, but different, numbers.  We can always do that as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in the first move, for the black square, we have two numbers to choose from and either works; say we end up with \(x\)&lt;/li&gt;
  &lt;li&gt;in the second move, for the white square, one number is forbidden, one we potentially cannot use because we used it on black but one number remains; say it’s \(y\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From there on we just continue filling black with \(x\) and white squares with \(y\).  At some point we will have filled all black (or white) squares but at this point we can put any number on white (black) other than \(x\) (\(y\)).  Again we can always do that as we cannot use \(x\) and we cannot use whatever Alice forbids us to, but one option always remains.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1504&lt;/tiny&gt;E / &lt;tiny&gt;1503&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1504e/&quot;&gt;
    Travelling Salesman Problem
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1504/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;shortest paths&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1504&lt;/tiny&gt;F / &lt;tiny&gt;1503&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1504f/&quot;&gt;
    Flip the Cards
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1504/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;2-sat&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1503&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1503e/&quot;&gt;
    2-Coloring
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1503/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;combinatorics&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1503&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1503f/&quot;&gt;
    Balance the Cards
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1503/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;divide and conquer&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;geometry&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-712.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Sat, 03 Apr 2021 00:00:00 +0100</pubDate>
        <link>//R-712</link>
        <link href="/R-712"/>
        <guid isPermaLink="true">/R-712</guid>
      </item>
    
      <item>
        <title>Round 711 (Div II)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1498&quot;&gt;CodeCraft-21 and Codeforces Round #711 (Div. 2)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1498&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1498a/&quot;&gt;
    GCD Sum
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1498/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r711/1498a-gcd-sum.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Simply try consecutive numbers until hitting one that fulfils the requirements.  We won’t have to try for long as numbers divisible by \(3\) have sum of their digits divisible by \(3\) and so at least every third number works.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1498&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1498b/&quot;&gt;
    Box Fitting
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1498/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r711/1498b-box-fitting.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1300 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1300&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;bitmasks&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Simple greedy strategy works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;continue packing largest box that still fits,&lt;/li&gt;
  &lt;li&gt;when nothing fits any more take a new box of size \(w\).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1498&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1498c/&quot;&gt;
    Planar Reflections
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1498/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r711/1498c-planar-reflections.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;This screams DP.  Let’s call by \(\mathcal{D}_{i, j}\) the number of particles we finally get after a single one hits a plane so that it will \(i\) planes to go through going right and it has power \(j\).&lt;/p&gt;

&lt;p&gt;For boundary conditions clearly if power is \(1\) then answer is \(1\) as it won’t get cloned.&lt;/p&gt;

&lt;p&gt;Otherwise we will get:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(\mathcal{D}_{i-1, j}\) particles after moving right, i.e. we have one fewer planes to go through and our power does not change and&lt;/li&gt;
  &lt;li&gt;\(\mathcal{D}_{n-i, j-1}\) particles after moving left, i.e. our power goes down by one and going to the left is the same as going through the right in the mirror image, so we appropriately adjust the number of planes on our way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another option was to have another dimension of the DP indicating direction of travel and it’s quite possible that this was easier to code quickly and correctly.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1498&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1498d/&quot;&gt;
    Bananas in a Microwave
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1498/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1498&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1498e/&quot;&gt;
    Two Houses
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1498/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;interactive&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;probabilities&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1498&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1498f/&quot;&gt;
    Christmas Game
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1498/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;games&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;trees&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-711.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Mon, 29 Mar 2021 00:00:00 +0100</pubDate>
        <link>//R-711</link>
        <link href="/R-711"/>
        <guid isPermaLink="true">/R-711</guid>
      </item>
    
      <item>
        <title>Round 710 (Div III)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1506&quot;&gt;Codeforces Round #710 (Div. 3)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506a/&quot;&gt;
    Strange Table
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506a-strange-table.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Firstly we need to find the row and column numbers as: \(r = (x-1) \mod n\) and \(c = \lceil \frac{x-1}{n} \rceil\), respectively (both \(0\)-based).  Then the answer is simply: \(r \cdot m + c + 1\).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506b/&quot;&gt;
    Partial Replacement
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506b-partial-replacement.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Greedy.  Start at the position of the first start and until reaching the last star, in each move go as far right as the constraints allow (i.e. to another star not more than \(k\) characters away).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506c/&quot;&gt;
    Double-ended Strings
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506c-double-ended-strings.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1000 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1000&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;hashing&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;strings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Given how small the constraints are we can go with a simple solution of just iterating through all the substrings of \(a\) and checking if any of them is a substring of \(b\); if so then we can keep that substring in both and only delete all the remaining characters.  Pick best among all substrings.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506d/&quot;&gt;
    Epic Transformation
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506d-epic-transformation.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1400 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1400&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Let’s compute frequency for all the numbers.  Clearly, in every step we can decrement two of those numbers and so we will only be left with one being non-zero and we want to minimize its value.  The optimal strategy is to greedily pair two most frequent numbers.  In fact, let’s say the most frequent element occurs \(m\) times.  Then we can match it \(n - m\) times and so in the end we will be left with \(max(0, m - (n - m))\) of its copies.  Except for when the number of elements is odd, in which case we will only be left with at least \(1\) element unmatched.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506e/&quot;&gt;
    Restoring the Permutation
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506e-restoring-the-permutation.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Let’s build the permutation from left to right.  Every time we see a new element \(a\) all the elements from the maximal seen so far, all the up to \(a\) become “available”.&lt;/p&gt;

&lt;p&gt;Now we get the answers following a greedy strategy, by choosing smallest/largest available for smallest/largest lexicographically.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506f/&quot;&gt;
    Triangular Paths
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506f-triangular-paths.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:2000 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2000&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;shortest paths&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Since all arrows point downwards the only possible path is by visiting them in the increasing order of layers.  So what’s left is to know how to compute the cost of moving between two given coordinates.&lt;/p&gt;

&lt;p&gt;My thinking was to introduce a notion of a “line” where the first one contains \((1, 1), (2, 2), (3, 3), \ldots\), the second one \((2, 1), (3, 2), (4, 3), \ldots\) etc. (see notes for clarification).  So coordinate \((x, y)\) is in line \(x-y\).&lt;/p&gt;

&lt;p&gt;Now suppose we want to go from \((x_1, y_1)\) to \((x_2, y_2)\).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If they are in the same line, then we can move for free if it’s an odd line (as all arrows go the way we want them) or for \(x_2 - x_1\) otherwise (as we need to flip all the arrows between them).&lt;/li&gt;
  &lt;li&gt;If they are on different lines then the answer is the number of times we need to go from odd to even line, as we can do all the necessary travelling “down-right” on some odd line on the way.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1506&lt;/tiny&gt;G

  
  &lt;a href=&quot;/codeforces-editorials/problems/1506g/&quot;&gt;
    Maximize the Remaining String
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1506/problem/G&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r710/1506g-maximize-the-remaining-string.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:2000 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2000&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;strings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;For each letter we need to leave just one (any) copy of it.  Firstly let’s build for each letter a lists of positions at which it occurs.  Now we will build \(t\) by looking at all the indices of last occurrences for all the letters and taking minimum over them, let’s call that \(p\).  As it’s the last occurrence of some letter, we eventually need to use it, unless we use one of it earlier occurrences.  The candidates for the next letter in \(t\) are all the letters that are not yet in \(t\) and occur in the first \(p\) characters of \(s\).  We want lexicographically largest solution so let’s pick the largest candidate.  Once we pick it we cannot use that letter any more and from all the list of indices for all the letters we can remove the ones that are smaller or equal to \(p\), then continue until we distributed all the letters.&lt;/p&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-710.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
        <link>//R-710</link>
        <link href="/R-710"/>
        <guid isPermaLink="true">/R-710</guid>
      </item>
    
      <item>
        <title>Round 709 (Div I+II)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1483&quot;&gt;Codeforces Round #709 (Div. 1, based on Technocup 2021 Final Round)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1484&quot;&gt;Codeforces Round #709 (Div. 2, based on Technocup 2021 Final Round)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1484&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1484a/&quot;&gt;
    Prison Break
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1484/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r709/1484a-prison-break.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;It’s fairly easy to find a solution with \(n \cdot m\), for instance doing a snake like pattern from top-left to bottom, going row by row.  An argument why that’s optimal is: if we think about it as a graph we start with \(n \cdot m\) components and with one move we connect at most two into ones, so we need \(n \cdot m - 1\) move to make the graph connected, plus one to connect with the outside world.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1484&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1484b/&quot;&gt;
    Restore Modulo
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1484/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r709/1484b-restore-modulo.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Let’s look at all the differences of consecutive elements.  We have few cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if there’s just one distinct value we can choose infinitely many large \(m\)s.&lt;/li&gt;
  &lt;li&gt;if there are more than two distinct values then there is no answer.&lt;/li&gt;
  &lt;li&gt;why can we have two values?  Because one (positive) might be a “regular” one bumping up by \(c\) and the other one (negative) might be once we “wrap up” modulo \(m\).  In this case the positive one is \(c\) and \(m\) is the difference between the two.  What remains to be done is to check whether this is indeed a valid solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1484&lt;/tiny&gt;C / &lt;tiny&gt;1483&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1484c/&quot;&gt;
    Basic Diplomacy
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1484/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r709/1484c-basic-diplomacy.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;combinatorics&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;flows&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Greedy.  If there are days with \(0\) candidates there is no answer.  For days with \(1\) candidate let’s choose him.  From then one we have a choice and let’s greedily choose a friend that was used least times so far.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1484&lt;/tiny&gt;D / &lt;tiny&gt;1483&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1484d/&quot;&gt;
    Playlist
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1484/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r709/1484d-playlist.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1900 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1900&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dsu&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;It helps to first think how we would naively simulate it.  We need to remove entries so let’s keep everything on a doubly linked circular list.&lt;/p&gt;

&lt;p&gt;Why simple simulation is not good enough?  Because we can have an input like lots of \(2\)s followed by lots of \(3\) and we only do one deletion per “round” so this is going to be too slow.&lt;/p&gt;

&lt;p&gt;One way to speed it up is to in addition to regular pointers in the list add “shortcut” links.  If we go through a block \(a_1, \ldots a_n\) without doing any deletions and then finally do a deletion from \(a_n\) to \(b\) then we add shortcuts from \(a_1, \ldots a_{n-1}\) to \(a_n\) as those numbers (on their own) will never be reduced.&lt;/p&gt;

&lt;p&gt;From here on it’s just a matter of careful implementation; when done properly this is actually short and sweet.  What helps a lot is that we have a fixed initial size of the input so instead of doing any pointers we just store appropriate indices in static arrays.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1484&lt;/tiny&gt;E / &lt;tiny&gt;1483&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1484e/&quot;&gt;
    Skyline Photo
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1484/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1484&lt;/tiny&gt;F / &lt;tiny&gt;1483&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1484f/&quot;&gt;
    Useful Edges
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1484/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2400 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2400&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;shortest paths&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1483&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1483e/&quot;&gt;
    Vabank
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1483/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;interactive&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1483&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1483f/&quot;&gt;
    Exam
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1483/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3400 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3400&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dsu&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;string suffix structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;trees&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-709.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
        <link>//R-709</link>
        <link href="/R-709"/>
        <guid isPermaLink="true">/R-709</guid>
      </item>
    
      <item>
        <title>Educational Round 106</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1499&quot;&gt;Educational Codeforces Round 106 (Rated for Div. 2)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499a/&quot;&gt;
    Domino on Windowsill
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu106/1499a-domino-on-windowsill.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Fairly simple; we can place \(min(k_1, k_2)\) dominoes vertically and then we’re left with \(max(k_1, k_2) - min(k_1, k_2)\) consecutive cells where we can put half as many horizontal dominoes.  The case for white dominoes is analogous (and it’s easy to compute \(k_1\) and \(k_2\) for that case).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499b/&quot;&gt;
    Binary Removals
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu106/1499b-binary-removals.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1000 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1000&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Eventually we want to have all \(0\)s on some prefix and all \(1\)s from then on.  What’s the longest prefix where we can make all \(0\)s?  Well, until we hit two \(1\)s next to each other.  From that point onwards we can make all \(1\)s until we hit two \(0\)s next to each other.  If by doing those two steps we processed the whole string we’re good; otherwise the answer is clearly “NO”.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499c/&quot;&gt;
    Minimum Grid Path
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu106/1499c-minimum-grid-path.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, clearly both axis are independent (and controlled by even/odd \(c_i\)) so we can kinda decompose into two subproblems.&lt;/p&gt;

&lt;p&gt;If we had to use all \(c_i\) then the optimal strategy is fairly clear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make minimal number of steps possible, i.e. \(1\), for all “turns” but the one with minimal \(c_i\),&lt;/li&gt;
  &lt;li&gt;and then make all the remaining steps for the cheapest (applicable) \(c_i\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, we do not have to use all \(c_i\); we might do with just a prefix.  It’s fairly easy to scan from \(2\) to \(n\) and at each point compute in constant time what the cost would be if we were to use only that many \(c_i\).  Then just pick the best option.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499d/&quot;&gt;
    The Number of Pairs
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/edu/edu106/1499d-the-number-of-pairs.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:2100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;number theory&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, let’s look at \(a\) and \(b\) in such a way that it is easy to reason about \(gcd\) and \(lcm\), namely, say \(a = g \cdot p\) and \(b = g \cdot q\) such that \(gcd(p, q) = 1\), i.e. they are co-prime.  It’s then easy to see that \(gcd(a, b) = g\) and \(lcm(a, b) = g \cdot p \cdot q\).  Let’s now look again at the original equation:&lt;/p&gt;

\[c \cdot lcm(a, b) - d \cdot gcd(a, b) = x\]

\[c \cdot g \cdot p \cdot q - d \cdot g = x\]

\[g \cdot (c \cdot p \cdot q - d) = x\]

&lt;p&gt;Since \(g\) is a factor on the left hand side we conclude that \(x\) must be divisible by \(x\), so firstly let’s iterate through all divisors of \(x\) as candidates for \(g\).&lt;/p&gt;

&lt;p&gt;Once we have a fixed \(g\):&lt;/p&gt;

\[c \cdot p \cdot q = \frac{x}{g} + d\]

&lt;p&gt;and so again we see that \(\frac{x}{g} + d\) must be divisible by \(c\); if it’s not we can skip such a candidate.&lt;/p&gt;

&lt;p&gt;Now finally we get:&lt;/p&gt;

\[p \cdot q = \frac{\frac{x}{g} + d}{c}\]

&lt;p&gt;In other words we know what the product of \(p \cdot q\) should be equal to.  Recall that we can choose \(p\) and \(q\) any way we want provided that they are co-prime.  This means that any prime factor of \(p \cdot q\) must go to either \(p\) or \(q\), but not both.  In other words there are \(2^s\) ways to choose \(p\) and \(q\) where \(s\) is the number of prime factors of \(p \cdot q\).&lt;/p&gt;

&lt;p&gt;The tricky bit is that if we naively use Eratosthenes sieve we have \(\sqrt{x}\) factors for \(x\) and for each we need \(log x\) time for a total of \(O(\sqrt{x}\ \log{x})\), which is not fast enough.&lt;/p&gt;

&lt;p&gt;What we need to do is to precompute the number of prime factors for all numbers in the range we care about (i.e. up to \(2 \cdot 10^7\)).  Sieve gives us a smaller prime factor for every number.  Suppose we are looking at \(x\) with its smaller prime being \(p\).  We have two cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;smaller prime of \(\frac{x}{p}\) is also \(p\), in which case \(x\) has as many prime factors as \(\frac{x}{p}\),&lt;/li&gt;
  &lt;li&gt;or it has one more, if they are different.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499e/&quot;&gt;
    Chaotic Merge
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2400 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2400&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;combinatorics&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499f/&quot;&gt;
    Diameter Cuts
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2400 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2400&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dfs and similar&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;trees&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1499&lt;/tiny&gt;G

  
  &lt;a href=&quot;/codeforces-editorials/problems/1499g/&quot;&gt;
    Graph Coloring
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1499/problem/G&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3100 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3100&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;interactive&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/Edu-106.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
        <link>//Edu-106</link>
        <link href="/Edu-106"/>
        <guid isPermaLink="true">/Edu-106</guid>
      </item>
    
      <item>
        <title>Round 708 (Div II)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1497&quot;&gt;Codeforces Round #708 (Div. 2)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497a/&quot;&gt;
    Meximization
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r708/1497a-meximization.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Greedy: put all distinct elements in ascending order, as that will maximize the series of MEXes; then all duplicates follow in any order as they won’t affect the MEX.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497b/&quot;&gt;
    M-arrays
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r708/1497b-m-arrays.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Count all elements by their remainder modulo \(m\).  All elements with remainder \(0\) must go to a group on their own.  Then we can group together \(i\) and \(m-i\), interleaving those two groups but be careful because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we can use one more from one group than the other,&lt;/li&gt;
  &lt;li&gt;when \(i\) and \(m-i\) are the same we can put them all in one group.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;C1

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497c1/&quot;&gt;
    k-LCM (easy version)
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/C1&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r708/1497c1-k-lcm-easy.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Few cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if \(n \mod 2 = 1\) then take \((1, \lfloor \frac{n}{2} \rfloor, \lfloor \frac{n}{2} \rfloor)\) with an \(lcm\) of \(\lfloor \frac{n}{2} \rfloor\).&lt;/li&gt;
  &lt;li&gt;if \(n \mod 3 = 0\) then take \((\frac{n}{3}, \frac{n}{3}, \frac{n}{3})\) with an \(lcm\) of \(\frac{n}{3}\) (turns out this case is actually not needed).&lt;/li&gt;
  &lt;li&gt;if \(n \mod 4 = 0\) then take \((\frac{n}{2}, \frac{n}{4}, \frac{n}{4})\) with an \(lcm\) of \(\frac{n}{2}\).&lt;/li&gt;
  &lt;li&gt;otherwise \(n\) is even but is not a multiple of \(4\) (i.e. \(\frac{n}{2}\) is odd) and take \((\frac{n}{2}-1, \frac{n}{2}-1, 2)\) with an \(lcm\) of \(\frac{n}{2}-1\).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;C2

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497c2/&quot;&gt;
    k-LCM (hard version)
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/C2&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r708/1497c2-k-lcm-hard.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;constructive algorithms&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Actually just take \(1\) for all but \(3\) values and for the remaining three values use the solution for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497d/&quot;&gt;
    Genius
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;bitmasks&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;graphs&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;shortest paths&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;E1

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497e1/&quot;&gt;
    Square-free division (easy version)
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/E1&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r708/1497e1-square-free-division-easy.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1700 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1700&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;number theory&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;two pointers&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1497&lt;/tiny&gt;E2

  
  &lt;a href=&quot;/codeforces-editorials/problems/1497e2/&quot;&gt;
    Square-free division (hard version)
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1497/problem/E2&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r708/1497e2-square-free-division-hard.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:2500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;greedy&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;hashing&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;number theory&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;two pointers&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-708.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
        <link>//R-708</link>
        <link href="/R-708"/>
        <guid isPermaLink="true">/R-708</guid>
      </item>
    
      <item>
        <title>Round 707 (Div I+II)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1500&quot;&gt;Codeforces Round #707 (Div. 1, based on Moscow Open Olympiad in Informatics)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1501&quot;&gt;Codeforces Round #707 (Div. 2, based on Moscow Open Olympiad in Informatics)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1501&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1501a/&quot;&gt;
    Alexey and Train
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1501/problem/A&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r707/1501a-alexey-and-train.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;This essentially just requires following the instructions in the problem.  Let’s note by \(\mathcal{A}_i\) the arrival time at station \(i\) and by \(\mathcal{D}_i\) departure time.  Then we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(\mathcal{A}_i = \mathcal{D}_{i-1} + a_i - b_{i-1} + tm_i\) and&lt;/li&gt;
  &lt;li&gt;\(\mathcal{D}_i = max(b_i, \mathcal{A}_i  + \lceil \frac{b_i - a_i}{2} \rceil)\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to report \(\mathcal{A}_n\).&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1501&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1501b/&quot;&gt;
    Napoleon Cake
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1501/problem/B&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r707/1501b-napoleon-cake.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:900 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;900&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;sortings&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;It was possible to do it with some observations and simple operations, however an easy way out was just to use a Fenwick tree and directly simulate the process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start with all layers being \(0\),&lt;/li&gt;
  &lt;li&gt;every time cream is poured on some lawyers just increase the respective range by \(1\),&lt;/li&gt;
  &lt;li&gt;at the end every layer which is greater than \(0\) has some cream on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1501&lt;/tiny&gt;C / &lt;tiny&gt;1500&lt;/tiny&gt;A

  
  &lt;a href=&quot;/codeforces-editorials/problems/1501c/&quot;&gt;
    Going Home
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1501/problem/C&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r707/1501c-going-home.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:1800 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;1800&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;implementation&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;The key observation here was that a brute-force looking like \(O(n^2)\) is actually good enough.&lt;/p&gt;

&lt;p&gt;The solution is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;see if there are \(4\) copies of any element, if so they clearly form a solution; if not, ignore duplicates.&lt;/li&gt;
  &lt;li&gt;keep a map from value to two indices whose elements sum up to that value.&lt;/li&gt;
  &lt;li&gt;we’re ignoring duplicates so if we find another pair we clearly found a solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually, this does NOT work… but passed all the tests… interesting ;)&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1501&lt;/tiny&gt;D / &lt;tiny&gt;1500&lt;/tiny&gt;B

  
  &lt;a href=&quot;/codeforces-editorials/problems/1501d/&quot;&gt;
    Two chandeliers
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1501/problem/D&quot;&gt;
  [CF]
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/akoprow/competetive-programming/blob/master/src/codeforces/r700-719/r707/1501d-two-chandeliers.kt&quot;&gt;(Code)&lt;/a&gt;

  &lt;rating&gt;R:2200 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2200&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;brute force&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;chinese remainder theorem&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;math&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;p&gt;Apparently this is a canonical problem for the Chinese remainder theorem, however, I have solve it without any notion of it.&lt;/p&gt;

&lt;p&gt;Without loss of generality, let’s assume \(n \ge m\), i.e. the first chandeliers’ configuration is at least as long as the one of the second one (if not, swap them).&lt;/p&gt;

&lt;p&gt;Clearly, at time \(t\) the chandeliers will be in configuration: \((t \mod n, t \mod m)\).  The first one has a cycle of length \(n\) and the of length \(m\) and so altogether they have a cycle of \(n \cdot m\) (or less, but we just care about a cycle, not a smallest one so that will do).&lt;/p&gt;

&lt;p&gt;So now think about this as an \(n \times m\) matrix, where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the columns are indexed by the configurations of the first chandelier&lt;/li&gt;
  &lt;li&gt;the rows are indexed by the &lt;em&gt;initial&lt;/em&gt; configuration of the second chandeliers (i.e. in the first row it will be: \(0, 1 \mod m, 2 \mod m, \ldots\) and in the i’th \(i, (i+1) \mod m, \ldots\) etc.)&lt;/li&gt;
  &lt;li&gt;each cell has \(1\) if chandeliers’ configurations match or \(0\) if they don’t.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This matrix is clearly too big to construct but we don’t need to do that, it will just help us visualize what’s going on.  Notice that if we were to simulate this process we would go through the first row of this matrix, then jump to row \(n \mod m\) (0-based) and go through it, then row \(2n \mod m\) and so on.&lt;/p&gt;

&lt;p&gt;Notice further that numbers in the columns are all different and so for any number of the second chandelier (rows) there is at most \(1\) matching column.  So let’s now compute sums for all \(m\) rows of this matrix by iterating through numbers of the second chandelier.  Let’s say that it’s \(v\) at index \(i\).  Let’s then find \(v\) in the first chandelier, let’s say it’s at position \(j\) (if it’s not there we get \(0\) matches and move on).  That means that the row in which they will match is \((i-j) \mod m\) (careful with negative arguments to modulo) so we increment its sum by \(1\) and go on.&lt;/p&gt;

&lt;p&gt;So now that we have all the sums in all rows let’s compute the number of matches in full \(n \cdot m\) cycles.  We do that by iterating from \(0\) to \(m\) and at every \(i\)‘th iteration taking the sum from row \(n \cdot i \mod m\).&lt;/p&gt;

&lt;p&gt;Now we are ready to compute the final answer in three steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many full \(n \cdot m\) iterations do we need?  Calculate that by dividing \(k\) by the number of mismatches in \(n \cdot m\) cycles.&lt;/li&gt;
  &lt;li&gt;After that, how many full rows do we still need to traverse?  Let’s iterate through rows until what’s left of \(k\) falls below what’s in the current row.  Note that because of the previous step we will do at most \(m\) iterations here.&lt;/li&gt;
  &lt;li&gt;Finally for the remainder just do it step by step until \(k\) goes to zero.  Again, thanks to previous steps that won’t take more than \(n\) steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So essentially we’re simulating the game, it’s just that we start by doing \(n \cdot m\) steps at once, then fall back to \(n\) steps at once and only for the last few steps do it step by step.&lt;/p&gt;

&lt;p&gt;The final complexity is \(O(max(n, m))\), which, interestingly, is better than the canonical solution from the editorial.&lt;/p&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1501&lt;/tiny&gt;E / &lt;tiny&gt;1500&lt;/tiny&gt;C

  
  &lt;a href=&quot;/codeforces-editorials/problems/1501e/&quot;&gt;
    Matrix Sorting
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1501/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2600 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2600&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1501&lt;/tiny&gt;F / &lt;tiny&gt;1500&lt;/tiny&gt;D

  
  &lt;a href=&quot;/codeforces-editorials/problems/1501f/&quot;&gt;
    Tiles for Bathroom
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1501/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:2900 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;2900&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;two pointers&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1500&lt;/tiny&gt;E

  
  &lt;a href=&quot;/codeforces-editorials/problems/1500e/&quot;&gt;
    Subset Trick
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1500/problem/E&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3300 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3300&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;binary search&lt;/span&gt;
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;data structures&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
  
  &lt;tiny&gt;1500&lt;/tiny&gt;F

  
  &lt;a href=&quot;/codeforces-editorials/problems/1500f/&quot;&gt;
    Cupboards Jumps
  &lt;/a&gt;
  &lt;a href=&quot;https://codeforces.com/contest/1500/problem/F&quot;&gt;
  [CF]
  &lt;/a&gt;

  

  &lt;rating&gt;R:3500 &lt;meter min=&quot;800&quot; max=&quot;3600&quot; value=&quot;3500&quot; /&gt;&lt;/rating&gt;

  &lt;labels&gt;
  
  
    &lt;span class=&quot;badge rounded-pill bg-warning text-dark&quot;&gt;dp&lt;/span&gt;
  
  &lt;/labels&gt;
&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;object data=&quot;notes/R-707.pdf&quot; width=&quot;1000&quot; height=&quot;1000&quot; type=&quot;application/pdf&quot; /&gt;

</description>
        <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
        <link>//R-707</link>
        <link href="/R-707"/>
        <guid isPermaLink="true">/R-707</guid>
      </item>
    
  </channel>
</rss>
